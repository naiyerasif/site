@use "mixins";

.callout {
	--calloutFg: var(--x3-fg-callout, var(--x3-fg-note));
	--calloutBg: var(--x3-bg-callout, var(--x3-bg-note-gentle));
	--calloutBorderColor: var(--x3-border-callout, var(--x3-border-note));
	--calloutBorderRadius: var(--x3-radius-base);
	--calloutBorderWidth: var(--x3-border-width-sm);
	--calloutPadding: 1ch;

	display: flex;
	font-size: 0.95em;
	border-radius: var(--calloutBorderRadius);

	&-hint {
		flex: none;
		color: var(--calloutFg);
		background-color: var(--calloutBorderColor);
		border-start-start-radius: inherit;
		border-end-start-radius: inherit;
		padding: var(--calloutPadding);
		line-height: 1.5;
	}

	&-body {
		flex: 1;
		overflow: auto;
		padding: var(--calloutPadding);
		background-color: var(--calloutBg);
		border-start-end-radius: inherit;
		border-end-end-radius: inherit;
		@include mixins.flow;
		border-block: var(--calloutBorderWidth) dotted var(--calloutBorderColor);
		border-inline-end: var(--calloutBorderWidth) dotted var(--calloutBorderColor);

		& > strong:first-of-type {
			color: var(--calloutFg);
		}
	}

	&.setup li {
		--x3-gap-flow: 0;
		font-variant-numeric: tabular-nums lining-nums;
	}
}

[data-callout="commend"] {
	--x3-fg-callout: var(--x3-fg-commend);
	--x3-bg-callout: var(--x3-bg-commend-gentle);
	--x3-border-callout: var(--x3-border-commend);
}

[data-callout="assert"] {
	--x3-fg-callout: var(--x3-fg-assert);
	--x3-bg-callout: var(--x3-bg-assert-gentle);
	--x3-border-callout: var(--x3-border-assert);
}

[data-callout="warn"] {
	--x3-fg-callout: var(--x3-fg-warn);
	--x3-bg-callout: var(--x3-bg-warn-gentle);
	--x3-border-callout: var(--x3-border-warn);
}

[data-callout="deter"] {
	--x3-fg-callout: var(--x3-fg-deter);
	--x3-bg-callout: var(--x3-bg-deter-gentle);
	--x3-border-callout: var(--x3-border-deter);
}
