---
import siteInfo, { canonical } from "~universal"

function canonize(pageInfo) {
	if (pageInfo.url) {
		pageInfo.url = canonical(pageInfo.url)
	}

	if (pageInfo.previous) {
		pageInfo.previous = canonical(pageInfo.previous)
	}

	if (pageInfo.next) {
		pageInfo.next = canonical(pageInfo.next)
	}

	if (pageInfo.source) {
		pageInfo.source = canonical(pageInfo.source)
	}

	pageInfo.description = pageInfo.description || siteInfo.description
	pageInfo.image = canonical(pageInfo.image || "/images/opengraph/default.png")
	pageInfo.type = pageInfo.type || "website"

	return pageInfo
}

const pageInfo = canonize(Astro.props.pageInfo)
const siteTitle = siteInfo.title
const siteAuthor = siteInfo.author
const twitterHandle = siteInfo.networks.twitter.username
const mastodonUrl = siteInfo.networks.mastodon.uri
---
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>{pageInfo.title} &mdash; {siteTitle}</title>
<link rel="icon" type="image/x-icon" href="/favicon.ico" sizes="any">
<link rel="icon" type="image/svg+xml" href="/favicon.svg">
<meta name="color-scheme" content="dark light">
<meta name="author" content={siteAuthor}>
<meta name="theme-color" content="#0e0e11" media="(prefers-color-scheme: dark)">
<meta name="theme-color" content="#fffcf5" media="(prefers-color-scheme: light)">
<link rel="mask-icon" href="/mask-icon.svg" color="#db0b2f">
<link rel="apple-touch-icon" href="/apple-touch-icon.png">
<link rel="manifest" href="/site.webmanifest">
<link rel="sitemap" href="/sitemap.xml">
<link rel="alternate" type="application/rss+xml" href="/feed.xml">
{pageInfo.url && <link rel="canonical" href={pageInfo.url}>}
{pageInfo.source && <link rel="source" href={pageInfo.source}>}
{pageInfo.previous && <link rel="prev" aria-label="Previous page" href={pageInfo.previous}>}
{pageInfo.next && <link rel="next" aria-label="Next page" href={pageInfo.next}>}
{pageInfo.description && <meta name="description" content={pageInfo.description}>}
<meta property="og:type" content={pageInfo.type}>
<meta property="og:site_name" content={siteTitle}>
<meta property="og:locale" content="en">
<meta property="og:title" content={pageInfo.title}>
{pageInfo.description && <meta property="og:description" content={pageInfo.description}>}
{pageInfo.url && <meta property="og:url" content={pageInfo.url}>}
<meta property="og:image" content={pageInfo.image}>
{pageInfo.description && <meta property="og:image:alt" content={pageInfo.description}>}
{pageInfo.published && <meta property="article:published_time" content={pageInfo.published}>}
{pageInfo.updated && <meta property="article:modified_time" content={pageInfo.updated}>}
<meta name="twitter:card" content="summary">
<meta property="twitter:title" content={pageInfo.title}>
{pageInfo.description && <meta property="twitter:description" content={pageInfo.description}>}
<meta name="twitter:image:src" content={pageInfo.image}>
<meta name="twitter:site" content={twitterHandle}>
<meta name="twitter:creator" content={twitterHandle}>
{pageInfo.timeToRead && <meta name="twitter:label1" content="Reading time">}
{pageInfo.timeToRead && <meta name="twitter:data1" content={pageInfo.timeToRead}>}
<link rel="me" href={mastodonUrl}>
<meta itemprop="name" content={pageInfo.title}>
{pageInfo.description && <meta itemprop="description" content={pageInfo.description}>}
<meta name="generator" content={Astro.generator}>
<script is:inline>
(function () {
	let preferredTheme
	try {
		preferredTheme = localStorage.getItem("theme")
	} catch (err) {}

	function setTheme(newTheme) {
		window.__theme = newTheme
		preferredTheme = newTheme
		document.firstElementChild.setAttribute("data-theme", newTheme)
	}
	
	const colorSchemeQuery = "(prefers-color-scheme: dark)"
	const prefersDarkTheme = window.matchMedia(colorSchemeQuery)

	window.__setPreferredTheme = function (newTheme) {
		setTheme(newTheme)
		try {
			localStorage.setItem("theme", newTheme)
		} catch (err) {}

		document.firstElementChild.dispatchEvent(new CustomEvent("themechange", {
			bubbles: true,
			composed: true,
			detail: { theme: newTheme }
		}))
	}

	prefersDarkTheme.addEventListener("change", function (event) {
		window.__setPreferredTheme(event.matches ? "dark" : "light")
	})

	setTheme(preferredTheme || (prefersDarkTheme.matches ? "dark" : "light"))
})()
</script>
<script src="/fuse@6.6.2.basic.min.js" is:inline async></script>
<style is:inline>
@font-face {
	font-family: Inter var;
	font-display: swap;
	src: url("/fonts/Inter-Regular.var.woff2") format("woff2");
	font-style: normal;
	font-weight: 100 900;
	font-named-instance: "Regular"
}

@font-face {
	font-family: Inter var;
	font-display: swap;
	src: url("/fonts/Inter-Italic.var.woff2") format("woff2");
	font-style: italic;
	font-weight: 100 900;
	font-named-instance: "Italic"
}

@font-face {
	font-family: JetBrains Mono var;
	font-display: swap;
	src: url("/fonts/JetBrainsMono.var.woff2") format("woff2");
	font-style: normal;
	font-weight: 100 900;
	font-named-instance: "Regular"
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-Light.woff2") format("woff2");
	font-style: normal;
	font-weight: 350
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-LightItalic.woff2") format("woff2");
	font-style: italic;
	font-weight: 350
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-Regular.woff2") format("woff2");
	font-style: normal;
	font-weight: 400
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-Italic.woff2") format("woff2");
	font-style: italic;
	font-weight: 400
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-Medium.woff2") format("woff2");
	font-style: normal;
	font-weight: 500
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-MediumItalic.woff2") format("woff2");
	font-style: italic;
	font-weight: 500
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-SemiBold.woff2") format("woff2");
	font-style: normal;
	font-weight: 600
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-SemiBoldItalic.woff2") format("woff2");
	font-style: italic;
	font-weight: 600
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-Bold.woff2") format("woff2");
	font-style: normal;
	font-weight: 700
}

@font-face {
	font-family: Inter;
	font-display: swap;
	src: url("/fonts/Inter-BoldItalic.woff2") format("woff2");
	font-style: italic;
	font-weight: 700
}

@font-face {
	font-family: MakeSans;
	font-display: swap;
	src: url("/fonts/MakeSans-Black.woff2") format("woff2");
	font-style: normal;
	font-weight: 900
}

@font-face {
	font-family: JetBrains Mono;
	font-display: swap;
	src: url("/fonts/JetBrainsMono-Light.woff2") format("woff2");
	font-style: normal;
	font-weight: 350
}

@font-face {
	font-family: JetBrains Mono;
	font-display: swap;
	src: url("/fonts/JetBrainsMono-Regular.woff2") format("woff2");
	font-style: normal;
	font-weight: 400
}

@font-face {
	font-family: JetBrains Mono;
	font-display: swap;
	src: url("/fonts/JetBrainsMono-Medium.woff2") format("woff2");
	font-style: normal;
	font-weight: 500
}

@font-face {
	font-family: JetBrains Mono;
	font-display: swap;
	src: url("/fonts/JetBrainsMono-SemiBold.woff2") format("woff2");
	font-style: normal;
	font-weight: 600
}

@font-face {
	font-family: JetBrains Mono;
	font-display: swap;
	src: url("/fonts/JetBrainsMono-Bold.woff2") format("woff2");
	font-style: normal;
	font-weight: 700
}

:root {
	--family-sans: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, "Segoe UI", Roboto, Ubuntu, Cantarell, "Noto Sans", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
	--family-mono: ui-monospace, SFMono-Regular, "Roboto Mono", Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
	--family-site-sans: "Inter", var(--family-sans);
	--family-site-stress: "MakeSans", var(--family-sans);
	--family-site-mono: "JetBrains Mono", var(--family-mono);
	--size-site-icon: 1.5rem;
	--text-site-small: 0.9rem;
	--text-site-base: calc(1rem + 0.2vw);
	--text-site-headline: calc(2rem + 3vw);
	--text-site-subheadline: calc(1rem + 0.5vw);
}
@supports (font-variation-settings: normal) {
	:root {
		--family-site-sans: "Inter var", var(--family-sans);
		--family-site-mono: "JetBrains Mono var", var(--family-mono)
	}
}
body:not(code):not(pre):not(kbd) {
	/* ss03: curved r */
	/* ss04: disambiguation without slashed-zero */
	font-feature-settings: "ss03", "ss04";
}
@media (hover: none) {
	:root {
		--size-site-icon: 24px;
	}
}
.icon {
	stroke: currentColor;
	stroke-width: 2;
	stroke-linecap: round;
	stroke-linejoin: round;
	fill: none;
	width: var(--size-site-icon);
	height: var(--size-site-icon);
	min-width: var(--size-site-icon);
	min-height: var(--size-site-icon);
}
</style>
