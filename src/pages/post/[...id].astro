---
import { getCollection, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Icon from "../../components/Icon.astro";
import SharePanel from "../../components/SharePanel.astro";
import ActionPanel from "../../components/ActionPanel.astro";
import Toc from "../../components/Toc.astro";
import Time from "../../components/Time.astro";
import format, { compare, format_date } from "../../modules/datetime/index.js";
import toc from "../../modules/table-of-contents/index.js";
import siteInfo, { postPathname } from "../../modules/website/index.js";
import { PostType, Status } from "../../modules/schema/defs.js";

export async function getStaticPaths() {
	const posts = await getCollection("post");
	return posts.sort((p1, p2) => compare(p1.data.date, p2.data.date))
		.map((post, index, posts) => ({ post: post, prev: posts[index - 1], next: posts[index + 1] }))
		.map(entry => ({
			params: { id: entry.post.id },
			props: { entry }
		}));
}

const { entry } = Astro.props;
const { post, prev, next } = entry;
const { data } = post;
const { Content, headings } = await render(post);
const url = Astro.url.pathname;
const showToc = data.showToc && headings && headings.length > 0;
const prevPage = prev ? postPathname(prev.id) : undefined;
const nextPage = next ? postPathname(next.id) : undefined;
const hasRecommendations = prevPage || nextPage;
const showUpdate = compare(data.update, data.date) !== 0;
const showStatus = !!data.status;

const pageInfo = {
	title: data.title,
	description: data.description,
	url,
	source: post.filePath,
	type: "article",
	published: format(data.date, format_date),
	updated: showUpdate ? format(data.update, format_date) : undefined,
	previous: prevPage,
	next: nextPage
};
---

<Layout {pageInfo} class="popout">
	<Fragment slot="hero">
		<nav class="hero-header breadcrumb">
			<a class="breadcrumb-item" href="/">Home</a>
			<span class="breadcrumb-item">{PostType[data.type].label}</span>
		</nav>
		<div class="hero-body">
			<hgroup>
				<h1>{data.title}</h1>
				{data.tagline && <p>{data.tagline}</p>}
			</hgroup>
		</div>
		<div class="hero-footer">
			<span><Icon name="calendar"/> Published on <Time date={data.date} /></span>{showUpdate && <span><Icon name="calendar-edit"/> Updated on <Time date={data.update} /></span>}{showStatus && <span class={`chip chip-${Status[data.status].tone.id}`}>{Status[data.status].label}</span>}
		</div>
	</Fragment>
	<article class="post">
		{showToc && <nav class="toc">
			<div class="toc-header">Table of Contents</div>
			<Toc headings={toc(headings, siteInfo.maxTocDepth)}/>
		</nav>}
		<Content/>
	</article>
	<Fragment slot="sidekick">
		<div class="sidekick-panels">
			<ActionPanel {pageInfo}/>
			<SharePanel {pageInfo}/>
		</div>

		{hasRecommendations && <ul class="rec">
			{prevPage && 
				<li class="rec-prev">
					<div class="hint">Previous</div>
					<a href={prevPage}>{prev.data.title}</a>
				</li>
			}
			{nextPage && 
				<li class="rec-next">
					<div class="hint">Next</div>
					<a href={nextPage}>{next.data.title}</a>
				</li>
			}
		</ul>}
	</Fragment>
</Layout>
